#!/usr/bin/python3
#
# Copyright 2018 ScyllaDB
#

#
# This file is part of Scylla.
#
# Scylla is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Scylla is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Scylla.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import glob
import re
import shutil
import shlex
import tarfile
import argparse
import subprocess

def run(cmd, shell=False):
    if not shell:
        cmd = shlex.split(cmd)
    return subprocess.check_call(cmd, shell=shell)

IXGBEVF_VER='4.3.5'
ENA_VER='1.5.3'

IXGBEVF_CONF='''
PACKAGE_NAME="ixgbevf"
PACKAGE_VERSION="{IXGBEVF_VER}"
CLEAN="cd src/; make clean"
MAKE="cd src/; make CFLAGS_EXTRA=-Wno-pointer-sign BUILD_KERNEL=${{kernelver}}"
BUILT_MODULE_LOCATION[0]="src/"
BUILT_MODULE_NAME[0]="ixgbevf"
DEST_MODULE_LOCATION[0]="/updates"
DEST_MODULE_NAME[0]="ixgbevf"
AUTOINSTALL="yes"
'''[1:-1]
ENA_CONF='''
PACKAGE_NAME="ena"
PACKAGE_VERSION="{ENA_VER}"
CLEAN="make -C kernel/linux/ena clean"
MAKE="make -C kernel/linux/ena BUILD_KERNEL=${{kernelver}}"
BUILT_MODULE_LOCATION[0]="kernel/linux/ena"
BUILT_MODULE_NAME[0]="ena"
DEST_MODULE_LOCATION[0]="/updates"
DEST_MODULE_NAME[0]="ena"
AUTOINSTALL="yes"
'''[1:-1]

def get_kver(pattern):
    for k in glob.glob(pattern):
        return re.sub(r'^/boot/vmlinuz-(.+)$', r'\1', k)

if __name__ == '__main__':
    if os.getuid() > 0:
        print('Requires root permission.')
        sys.exit(1)
    parser = argparse.ArgumentParser(description='Construct AMI')
    parser.add_argument('--localrpm', action='store_true', default=False,
                        help='deploy locally built rpms')
    parser.add_argument('--repo',
                        help='repository for both install and update, specify .repo/.list file URL')
    parser.add_argument('--repo-for-install',
                        help='repository for install, specify .repo/.list file URL')
    parser.add_argument('--repo-for-update',
                        help='repository for update, specify .repo/.list file URL')
    args = parser.parse_args()

    if args.repo:
        args.repo_for_install = args.repo_for_update = args.repo

    if not args.localrpm and not args.repo_for_install:
        print('Error: need to specify --localrpm or --repo/--repo-for-install')
        sys.exit(1)

    run('yum update -y')

    if args.repo_for_install:
        run('curl -L -o /etc/yum.repos.d/scylla_install.repo {REPO_FOR_INSTALL}'.format(REPO_FOR_INSTALL=args.repo_for_install))

    if args.localrpm:
        rpms = glob.glob('/home/centos/scylla*.*.rpm')
        run('yum install -y {}'.format(' '.join(rpms)))
    else:
        run('yum install -y scylla')

    if args.repo_for_install:
        os.remove('/etc/yum.repos.d/scylla_install.repo')
    if args.repo_for_update:
        run('curl -L -o /etc/yum.repos.d/scylla.repo {REPO_FOR_UPDATE}'.format(REPO_FOR_UPDATE=args.repo_for_update))

    shutil.move('/home/centos/scylla-ami/scylla-ami-setup.service', '/usr/lib/systemd/system/')
    run('systemctl daemon-reload')
    run('systemctl enable scylla-ami-setup.service')
    with open('/etc/cloud/cloud.cfg') as f:
        lines = f.readlines()
    with open('/etc/cloud/cloud.cfg', 'w') as f:
        for l in lines:
            if not re.match(r'^ - mounts\n$', l):
                f.write(l)
    shutil.move('/home/centos/scylla-ami', '/usr/lib/scylla/scylla-ami')
    run('/usr/lib/scylla/scylla_setup --ntp-domain amazon --no-coredump-setup --no-sysconfig-setup --no-raid-setup --no-io-setup --no-bootparam-setup --no-ec2-check')
    run('/usr/lib/scylla/scylla_sysconfig_setup --ami')
    run('/usr/lib/scylla/scylla_bootparam_setup --ami')
    os.remove('/home/centos/.ssh/authorized_keys')
    os.remove('/var/lib/scylla-housekeeping/housekeeping.uuid')

    run('yum -y update kernel')
    run('yum -y install dkms git grubby kernel-devel')
    run('rpm -e kernel-$(uname -r)', shell=True)
    run('rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org')
    run('rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm')
    run('yum -y --enablerepo=elrepo-kernel install kernel-ml kernel-ml-devel')
    os.remove('/etc/udev/rules.d/80-net-name-slot.rules')
    with open('/etc/default/grub') as f:
        grub = f.read()
    grub = re.sub(r'^GRUB_CMDLINE_LINUX="(.+)"$', r'GRUB_CMDLINE_LINUX="\1 net.ifnames=0"', grub, flags=re.MULTILINE)
    with open('/etc/default/grub', 'w') as f:
        f.write(grub)
    run('grub2-mkconfig -o /boot/grub2/grub.cfg')
    c7kver = get_kver('/boot/vmlinuz-*el7.x86_64')
    mlkver = get_kver('/boot/vmlinuz-*el7.elrepo.x86_64')
    run('grubby --grub2 --set-default /boot/vmlinuz-{mlkver}'.format(mlkver=mlkver))
    with open('/etc/yum.conf', 'a') as f:
        f.write('exclude=kernel kernel-devel')

    run('curl -L -o /usr/src/ixgbevf-{IXGBEVF_VER}.tar.gz https://sourceforge.net/projects/e1000/files/ixgbevf%20stable/{IXGBEVF_VER}/ixgbevf-{IXGBEVF_VER}.tar.gz'.format(IXGBEVF_VER=IXGBEVF_VER), shell=True)
    with tarfile.open('/usr/src/ixgbevf-{IXGBEVF_VER}.tar.gz'.format(IXGBEVF_VER=IXGBEVF_VER)) as tf:
        tf.extractall('/usr/src')
    with open('/usr/src/ixgbevf-{IXGBEVF_VER}/dkms.conf'.format(IXGBEVF_VER=IXGBEVF_VER), 'w') as f:
        f.write(IXGBEVF_CONF.format(IXGBEVF_VER=IXGBEVF_VER))
    run('dkms add -m ixgbevf -v {IXGBEVF_VER}'.format(IXGBEVF_VER=IXGBEVF_VER))
    run('dkms build -m ixgbevf -v {IXGBEVF_VER} -k {c7kver}'.format(IXGBEVF_VER=IXGBEVF_VER, c7kver=c7kver))
    run('dkms build -m ixgbevf -v {IXGBEVF_VER} -k {mlkver}'.format(IXGBEVF_VER=IXGBEVF_VER, mlkver=mlkver))
    run('dkms install -m ixgbevf -v {IXGBEVF_VER} -k {c7kver}'.format(IXGBEVF_VER=IXGBEVF_VER, c7kver=c7kver))
    run('dkms install -m ixgbevf -v {IXGBEVF_VER} -k {mlkver}'.format(IXGBEVF_VER=IXGBEVF_VER, mlkver=mlkver))

    run('git clone -b ena_linux_{ENA_VER} https://github.com/amzn/amzn-drivers /usr/src/ena-{ENA_VER}'.format(ENA_VER=ENA_VER))
    with open('/usr/src/ena-{ENA_VER}/dkms.conf'.format(ENA_VER=ENA_VER), 'w') as f:
        f.write(ENA_CONF.format(ENA_VER=ENA_VER))
    run('dkms add -m ena -v {ENA_VER}'.format(ENA_VER=ENA_VER))
    run('dkms build -m ena -v {ENA_VER} -k {c7kver}'.format(ENA_VER=ENA_VER, c7kver=c7kver))
    run('dkms build -m ena -v {ENA_VER} -k {mlkver}'.format(ENA_VER=ENA_VER, mlkver=mlkver))
    run('dkms install -m ena -v {ENA_VER} -k {c7kver}'.format(ENA_VER=ENA_VER, c7kver=c7kver))
    run('dkms install -m ena -v {ENA_VER} -k {mlkver}'.format(ENA_VER=ENA_VER, mlkver=mlkver))

    run('dracut --verbose --add-drivers "ixgbevf nvme ena" --force --kver {c7kver}'.format(c7kver=c7kver))
    run('dracut --verbose --add-drivers "ixgbevf nvme ena" --force --kver {mlkver}'.format(mlkver=mlkver))

    with open('/etc/cloud/cloud.cfg') as f:
        cfg = f.read()
    cfg2 = re.sub('^ssh_deletekeys:   0', 'ssh_deletekeys:   1', cfg, flags=re.MULTILINE)
    with open('/etc/cloud/cloud.cfg', 'w') as f:
        f.write(cfg2)
